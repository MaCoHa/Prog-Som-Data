exe8.1
    i: output visible in file ex8_1p1_answ.txt
    ii:
    Study the generated symbolic bytecode. Write up the bytecode in a more structured
    way with labels only at the beginning of the line (as in this chapter). Write
    the corresponding micro-C code to the right of the stack machine code. Note that
    ex5.c has a nested scope (a block{ ... }inside a function body); how is that
    visible in the generated code?:
        - check ex3.out and ex5.out for the answer to this.
        -- It is visible when the symbolic bytecode for "CALL" is loaded. this means that a new function is executed.
    Trace the execution using java Machinetrace ex3.out 4, and explain
    the stack contents and what goes on in each step of execution, and especially how the
    low-level bytecode instructions map to the higher-level features of micro-C. You can
    capture the standard output from a command prompt (in a file ex3trace.txt)
    using the Unix-style notation:
        -
        


exe8.3
    changes made in
        Comp.fs(209-210)
    test
        dotnet fsi -r ./fsharp/FsLexYacc.Runtime.dll Absyn.fs CPar.fs CLex.fs Parse.fs Machine.fs Comp.fs ParseAndComp.fs   
        open ParseAndComp;;
        compileToFile (fromFile "exe8_3.c") "exe8_3.out";;
        #quit;;
        java Machine exe8_3.out 2
    output - where arg n -> (n+1) (n+2) for n < 3
        3 4

exe8.4
    prog1:
        0:  CSTI 20000000
        2:  GOTO 7
        4:  CSTI 1
        6:  SUB
        7:  DUP
        8:  IFNZRO 4
        10: STOP
    
    
    
    0 20000000 16 7 0 1 2 9 18 4 25


exe8.5
    changes made in
        Absyn.fs(28)
        Interp.fs(203-206)
        CLex.fsl(83-84)
        CPar.fsy(22, 28, 143)
    test:
        dotnet fsi -r ./fsharp/FsLexYacc.Runtime.dll Absyn.fs CPar.fs CLex.fs Parse.fs Interp.fs ParseAndRun.fs
        open ParseAndRun;;
        run (fromFile "exe8_5.c") [17];; //1
        run (fromFile "exe8_5.c") [0];;  //0

exe8.6
    changes made in
        Absyn.fs(41), CLex.fsl(32-33), CPar.fsy(17, 107, 183-186), Interp.fs(147-152)
    run
        dotnet fsi -r ./fsharp/FsLexYacc.Runtime.dll Absyn.fs CPar.fs CLex.fs Parse.fs Interp.fs ParseAndRun.fs
        open ParseAndRun;;
        run (fromFile "exe8_6.c") [17];; //42
        run (fromFile "exe8_6.c") [3];;  //69


