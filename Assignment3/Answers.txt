

Exercise 3.3
    Let z = (17) in z + 2 * 3 end EOF
    
rule A  Expr EOF
rule F  LET NAME EQ Expr IN Expr END EOF
rule G  LET NAME EQ Expr IN (Expr TIMES Expr) END EOF
rule C  LET NAME EQ Expr IN (Expr TIMES CSTINT) END EOF
rule H  LET NAME EQ Expr IN ((Expr PLUS Expr) TIMES CSTINT) END EOF
rule C  LET NAME EQ Expr IN ((Expr PLUS CSTINT) TIMES CSTINT) END EOF
rule b  LET NAME EQ Expr IN ((NAME PLUS CSTINT) TIMES CSTINT) END EOF
rule C  LET NAME EQ CSTINT IN NAME PLUS CSTINT TIMES CSTINT END EOF
        let z = 17 In z + 2 * 3 end EOF


Exercise 3.4
See Exercise3.4.pdf 


Exercise 3.5
Filles in Expr

Inputs from the book

fromString "1 + 2 * 3";;
returns :: Absyn.expr = Prim ("+", CstI 1, Prim ("*", CstI 2, CstI 3))
    
fromString "1-2- 3";; 
returns :: Absyn.expr = Prim ("-", Prim ("-", CstI 1, CstI 2), CstI 3)

fromString "1 + -2";;
returns :: Absyn.expr = Prim ("+", CstI 1, CstI -2)

fromString "x++";;
returns :: System.Exception: parse error near line 1, column 3....

fromString "1 + 1.2";;
returns :: System.Exception: Lexer error: illegal symbol near line 1, column 6...

fromString "1 + ";;
returns :: System.Exception: parse error near line 1, column 4...

fromString "let z = (17) in z + 2 * 3 end";;
returns :: Let ("z", CstI 17, Prim ("+", Var "z", Prim ("*", CstI 2, CstI 3)))

fromString "let z = 17) in z + 2 * 3 end";;
returns :: System.Exception: parse error near line 1, column 11...

fromString "let in = (17) in z + 2 * 3 end";;
returns :: System.Exception: parse error near line 1, column 6...

fromString "1 + let x=5 in let y=7+x in y+y end + x end";;
returns :: Absyn.expr =
             Prim
               ("+", CstI 1,
                Let
                  ("x", CstI 5,
                   Prim
                     ("+",
                      Let
                        ("y", Prim ("+", CstI 7, Var "x"), Prim ("+", Var "y", Var "y")),
                      Var "x")))
                      
Our ovn inputs                 
fromString "24 * let x = 17 in x+x end";;
returns :: Prim ("*", CstI 24, Let ("x", CstI 17, Prim ("+", Var "x", Var "x")))

fromString "2 * let x = 17 in let y = 2+x in y*y end + x end";;
returns :: Absyn.expr =
             Prim
               ("", CstI 2,
                Let
                  ("x", CstI 17,
                   Prim
                     ("+",
                      Let
                        ("y", Prim ("+", CstI 2, Var "x"), Prim ("", Var "y", Var "y")),
                      Var "x")))

Exercise 3.6

file Expr/Parse.fs line 35 - 37;
    Use this command
    $ dotnet fsi -r FsLexYacc.Runtime.dll Absyn.fs ExprPar.fs ExprLex.fs Expr.fs Parse.fs



Exercise 3.7

file Expr/Absyn.fs line 12
file Expr/ExprLex.fsl line 37 - 39
file Expr/ExprPar.fsy line 14

After compiling it now has 25 states