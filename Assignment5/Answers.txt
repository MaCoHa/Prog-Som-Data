###Assignment 5

##Exercise 5.1

# (A)
    Coded in Program.fs line 4-11
    
# (B)
    Coded in Exe5_1/Program.cs

##Exercise 5.7

    Can be found in TypeInference.fs line 54

##Exercise 6.1
    From ./Fun run:
        $ dotnet fsi -r ./FsLexYacc.Runtime.dll Absyn.fs FunPar.fs FunLex.fs Parse.fs HigherFun.fs ParseAndRunHigher.fs
    And in fsi write:
        open ParseAndRunHigher;;
        run <| fromString "let add x = let f y = x+y in f end in add 2 5 end";;
        run <| fromString "let add x = let f y = x+y in f end in let addtwo = add 2 in addtwo 5 end end";;
        run <| fromString "let add x = let f y = x+y in f end in let addtwo = add 2 in let x = 77 in addtwo 5 end end end";;
        run <| fromString "let add x = let f y = x+y in f end in add 2 end";;
    
    In the third function the inner x is assigned 77, but that is never used in the calculation, because x is never used in the body of that statement.
    In the last function, the result is a closure, because the add function returns another function, which expect an input. But since this is never given a closure of adds environment is returned.

##Exercise 6.2

    file Fun/Funlex.fsl lines 29, 47 
    file Fun/HigherFun.fs lines 33, 62-63 and 71-74

##Exercise 6.3
    file Fun/FunPar.fsy lines 14, 16(IMP), 21(IMP), 41
    
##Exercise 6.4
    i: Proof found in exe6_4_ab.pdf, page 1
        - explenation: Since the function "let f x = 1 in f f end" is non-circular and finite (since f f = 1, since: f(x) = 1, thus f f = f(f(x) = 1) = 1
                       = f f = 1
                       and having that f is let-bound and everything evaluates to int (since f(x) = 1 we know that forall x, f(x) -> int, so the type of x does not matter in this case), the type of f should be polymorphic.
    
    ii: Proof found in exe6_4_ab.pdf, page 2
        - explenation:
                       First of all, there is a mistake in the task. This will not evaluate, since "if x < 10, then f(x+1) in f(20)" this will create an infinite loop. Due to this, we have made the assumption that the task was to solve the following instead of what was written in the exercise in the book -> "let f x = if x > 10 then 42 else f(x+1) in f 20 end" -> since this will not create an infinite loop.
                       
                       The reason that this is not polymorphic is that x must be an integer and the expression always evaluates to an integer, thus it breaks one of the rules of polymorphism (by being so called "1 to 1").

##Exercise 6.5

#(1)
    #(1.1) let f x = 1 in f f end
            has type int
            Teminal input
                inferType (fromString "let f x = 1 in f f end");;
            Teminal output
                val it: string = "int"
            
    #(1.2) let f g = g g in f end
            since g is a non defined function it cannot reason about
            what type or types is needed
            
            Teminal input
                inferType (fromString "let f g = g g in f end");;
            Teminal output
                System.Exception: type error: circularity
    
    #(1.3) let f x = let g y = y in g false end in f 42 end
            has type bool
    
            Teminal input
                inferType (fromString "let f x = let g y = y in g false end in f 42 end");;
            Teminal output
                val it: string = "bool"
    
    #(1.4)  let f x = let g y = if true then y else x in g false end
            x is not defined so it is not possible to reason about its type
                  
            Teminal input
                inferType (fromString "let g y = if true then y else x in g false end");;
            Teminal output
                System.Exception: x not found
    
    #(1.5)  let f x = let g y = if true then y else x in g false end in f true end
            has type "bool"
            
            Teminal input
                inferType (fromString "let f x = let g y = if true then y else x in g false end in f true end");;
            Teminal output
                val it: string = "bool"
                
#(2)
    
    #(2.1) bool -> bool
        Teminal input
            inferType (fromString "let f x = if x then true else false in f end");;
        Teminal output
            val it: string = "(bool -> bool)" 
                        
    #(2.2) int -> int
        Teminal input
            inferType (fromString "let f x = x + 4 in f end");;
        Teminal output
            val it: string = "(int -> int)"
        
    #(2.3) int -> int -> int
        Teminal input
           inferType (fromString "let f x = let g y = x+y in g end in f end");;
        Teminal output
           val it: string = "(int -> (int -> int))"
        
    #(2.4) ´a -> ´b -> ´a 
        Teminal input
            inferType (fromString "let f x = let g y = x in g end in f end");;
        Teminal output
            val it: string = "('h -> ('g -> 'h))"
            
    #(2.5) ´a -> ´b -> ´b
        Teminal input
            inferType (fromString "let f x = let g y = y in g end in f end");; 
        Teminal output
            val it: string = "('h -> ('g -> 'g))"
            
    #(2.6) (´a -> ´b) -> (´b -> ´c) -> (´a -> ´c)
        
    #(2.7) ´a -> ´b
      
    #(2.8) ´a
    
                  

    

